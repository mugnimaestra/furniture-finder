{"version":3,"sources":["components/ProductItem.js","App.js","serviceWorker.js","index.js"],"names":["ProductItemStyle","styled","div","ProductItem","number","product","className","name","price","toString","replace","text","length","textLength","result","substring","lastIndexOf","shortenString","description","furniture_style","join","delivery_time","App","useState","furnitures","setFurnitures","filteredData","setFilteredData","style","deliveryTime","filter","setFilter","useEffect","a","axios","get","then","res","data","products","getData","handleCheckBox","e","newArr","target","checked","push","theIndex","indexOf","splice","handleCheckBoxDeliveryTime","value","newFilteredData","item","some","furniStyle","isStyleMatch","forEach","stateStyle","filteredDeliveryData","furniDeliveryTime","parseInt","type","placeholder","onChange","lowerCase","toLowerCase","includes","furniture_styles","map","key","htmlFor","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"w4BAIA,IAAMA,E,MAAmBC,EAAOC,IAAV,KAqEPC,EAvBK,SAAC,GAAiB,IAhBdC,EAgBDC,EAAc,EAAdA,QAErB,OACE,kBAACL,EAAD,KACE,yBAAKM,UAAU,eACb,4BAAKD,EAAQE,MACb,8BArBgB,kBADAH,EAsBMC,EAAQG,OApB5B,OAAN,OAAcJ,EAAOK,WAAWC,QAAQ,wBAAyB,MAE5DN,IAoBH,yBAAKE,UAAU,eACb,2BAlBc,SAACK,EAAMC,GAC3B,IAAMC,EAAaD,GAAUA,EAAS,EAAIA,EAAS,IACnD,GAAID,EAAKC,QAAUC,EACjB,OAAOF,EAET,IAAMG,EAASH,EAAKI,UAAU,EAAGF,GACjC,MAAM,GAAN,OAAUC,EAAOC,UAAU,EAAGD,EAAOE,YAAY,MAAjD,OAYUC,CAAcZ,EAAQa,cAC1B,8BAAOb,EAAQc,gBAAgBC,KAAK,QAEtC,yBAAKd,UAAU,iBAAiBD,EAAQgB,cAAxC,W,MCmGSC,MA5Jf,WAAgB,IAAD,EACuBC,mBAAS,MADhC,mBACNC,EADM,KACMC,EADN,OAE2BF,mBAAS,IAFpC,mBAENG,EAFM,KAEQC,EAFR,OAGeJ,mBAAS,CACnCZ,KAAM,GACNiB,MAAO,GACPC,aAAc,KANH,mBAGNC,EAHM,KAGEC,EAHF,KASbC,qBAAU,YACK,uCAAG,sBAAAC,EAAA,sEACRC,IAAMC,IAAI,mDAAmDC,MAAK,SAAAC,GAEtEZ,EAAcY,EAAIC,MAClBX,EAAgBU,EAAIC,KAAKC,aAJb,2CAAH,qDAObC,KACC,IAEH,IASMC,EAAiB,SAAAC,GACrB,IAAIC,EAASb,EAAOF,MACpB,GAAIc,EAAEE,OAAOC,QACXF,EAAOG,KAAKJ,EAAEE,OAAOrC,MACrBwB,EAAU,eAAKD,EAAN,CAAcF,MAAOe,SACzB,CACL,IAAII,EAAWJ,EAAOK,QAAQN,EAAEE,OAAOrC,MACnCwC,GAAY,GACdJ,EAAOM,OAAOF,EAAU,GAE1BhB,EAAU,eAAKD,EAAN,CAAcF,MAAOe,OAI5BO,EAA6B,SAAAR,GACjC,IAAIC,EAASb,EAAOD,aACpB,GAAIa,EAAEE,OAAOC,QACXF,EAAOG,KAAKJ,EAAEE,OAAOO,OACrBpB,EAAU,eAAKD,EAAN,CAAcD,aAAcc,SAChC,CACL,IAAII,EAAWJ,EAAOK,QAAQN,EAAEE,OAAOO,OACnCJ,GAAY,GACdJ,EAAOM,OAAOF,EAAU,GAE1BhB,EAAU,eAAKD,EAAN,CAAcD,aAAcc,OAIrCS,EAAkB1B,EAAaI,QAAO,SAACuB,GACzC,OAAOA,EAAKlC,gBAAgBmC,MAAK,SAACC,GAChC,IAAIC,GAAe,EAUnB,OATI1B,EAAOF,MAAMhB,OAAS,EACxBkB,EAAOF,MAAM6B,SAAQ,SAACC,GAChBA,IAAeH,IACjBC,GAAe,MAInBA,GAAe,EAEVA,QAIX,GAAI1B,EAAOD,aAAajB,OAAS,EAAG,CAClC,IAAM+C,EAAuBP,EAAgBtB,QAAO,SAAAuB,GAClD,OAAOvB,EAAOD,aAAayB,MAAK,SAAAM,GAC9B,OAAOC,SAASD,GAAqBC,SAASR,EAAKhC,qBAGvD+B,EAAkBO,EAGpB,OACE,yBAAKrD,UAAU,OACb,yBAAKA,UAAU,eACb,2BACEwD,KAAK,OACLC,YAAY,mBACZC,SApEkB,SAAAtB,GACxB,IAAMuB,EAAYvB,EAAEE,OAAOO,MAAMe,cACjCnC,EAAU,eAAKD,EAAN,CAAcnB,KAAMsD,KAC7B,IAAMb,EAAkB5B,EAAWe,SAAST,QAAO,SAAAuB,GACjD,OAAOA,EAAK9C,KAAK2D,cAAcC,SAASF,MAE1CtC,EAAgByB,MAgEZ,yBAAK9C,UAAU,kBACb,yBAAKA,UAAU,mBACZkB,GACCA,EAAW4C,iBAAiBC,KAAI,SAACzC,GAC/B,OACE,2BAAO0C,IAAK1C,EAAO2C,QAAS3C,GACzBA,EACD,2BACEkC,KAAK,WACLvD,KAAMqB,EACNoC,SAAUvB,SAMtB,yBAAKnC,UAAU,0BACb,wCAEE,2BACE0D,SAAUd,EACVY,KAAK,WACLvD,KAAK,UACL4C,MAAM,OAGV,yCAEE,2BACEa,SAAUd,EACVY,KAAK,WACLvD,KAAK,WACL4C,MAAM,QAGV,yCAEE,2BACEa,SAAUd,EACVY,KAAK,WACLvD,KAAK,WACL4C,MAAM,QAGV,0CAEE,2BACEa,SAAUd,EACVY,KAAK,WACLvD,KAAK,YACL4C,MAAM,WAMhB,yBAAK7C,UAAU,qBACZkB,GACC4B,EAAgBiB,KAAI,SAAChB,GACnB,OAAO,kBAAC,EAAD,CAAaiB,IAAKjB,EAAK9C,KAAMF,QAASgD,UC9IrCmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhD,MAAK,SAAAiD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.19c22700.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\n\r\nconst ProductItemStyle = styled.div`\r\n  width: 330px;\r\n  min-height: 80px;\r\n  background: #fff;\r\n  border-radius: 8px;\r\n  box-shadow: 3px 3px 5px 6px #ccc;\r\n  padding: 0 0.5rem;\r\n  margin: 0 0 1rem 0;\r\n  .title-price {\r\n    display: flex;\r\n    width: 100%;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    span {\r\n      color: #ffa118;\r\n    }\r\n  }\r\n  .description {\r\n    span {\r\n      color: #7aade1;\r\n    }\r\n  }\r\n  .delivery-days {\r\n    height: 40px;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: flex-end;\r\n  }\r\n`;\r\n\r\nconst parseThousands = (number) => {\r\n  if (typeof number === \"number\") {\r\n    return `IDR ${number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}`;\r\n  }\r\n  return number;\r\n};\r\n\r\nconst shortenString = (text, length) => {\r\n  const textLength = length && length > 0 ? length : 114;\r\n  if (text.length <= textLength) {\r\n    return text;\r\n  }\r\n  const result = text.substring(0, textLength);\r\n  return `${result.substring(0, result.lastIndexOf(\" \"))}...`;\r\n};\r\n\r\nconst ProductItem = ({ product }) => {\r\n\r\n  return (\r\n    <ProductItemStyle>\r\n      <div className=\"title-price\">\r\n        <h3>{product.name}</h3>\r\n        <span>{parseThousands(product.price)}</span>\r\n      </div>\r\n      <div className=\"description\">\r\n        <p>{shortenString(product.description)}</p>\r\n        <span>{product.furniture_style.join(', ')}</span>\r\n      </div>\r\n      <div className=\"delivery-days\">{product.delivery_time} days</div>\r\n    </ProductItemStyle>\r\n  );\r\n}\r\n\r\nProductItem.propTypes = {\r\n  product: PropTypes.object.isRequired,\r\n}\r\n\r\n\r\n\r\nexport default ProductItem;","import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport ProductItem from './components/ProductItem';\nimport './App.css';\n\nfunction App() {\n  const [furnitures, setFurnitures] = useState(null);\n  const [filteredData, setFilteredData] = useState([]);\n  const [filter, setFilter] = useState({\n    text: '',\n    style: [],\n    deliveryTime: [],\n  });\n\n  useEffect(() => {\n    const getData = async () => {\n      await axios.get(\"http://www.mocky.io/v2/5c9105cb330000112b649af8\").then(res => {\n\n        setFurnitures(res.data);\n        setFilteredData(res.data.products);\n      });\n    }\n    getData();\n  }, [])\n\n  const handleInputSearch = e => {\n    const lowerCase = e.target.value.toLowerCase();\n    setFilter({ ...filter, text: lowerCase });\n    const newFilteredData = furnitures.products.filter(item => {\n      return item.name.toLowerCase().includes(lowerCase);\n    });\n    setFilteredData(newFilteredData);\n  }\n\n  const handleCheckBox = e => {\n    let newArr = filter.style;\n    if (e.target.checked) {\n      newArr.push(e.target.name);\n      setFilter({ ...filter, style: newArr });\n    } else {\n      let theIndex = newArr.indexOf(e.target.name);\n      if (theIndex > -1) {\n        newArr.splice(theIndex, 1);\n      }\n      setFilter({ ...filter, style: newArr });\n    }\n  }\n\n  const handleCheckBoxDeliveryTime = e => {\n    let newArr = filter.deliveryTime;\n    if (e.target.checked) {\n      newArr.push(e.target.value);\n      setFilter({ ...filter, deliveryTime: newArr });\n    } else {\n      let theIndex = newArr.indexOf(e.target.value);\n      if (theIndex > -1) {\n        newArr.splice(theIndex, 1);\n      }\n      setFilter({ ...filter, deliveryTime: newArr });\n    }\n  }\n\n  let newFilteredData = filteredData.filter((item) => {\n    return item.furniture_style.some((furniStyle) => {\n      let isStyleMatch = false;\n      if (filter.style.length > 0) {\n        filter.style.forEach((stateStyle) => {\n          if (stateStyle === furniStyle) {\n            isStyleMatch = true;\n          }\n        });\n      } else {\n        isStyleMatch = true;\n      }\n      return isStyleMatch;\n    });\n  });\n\n  if (filter.deliveryTime.length > 0) {\n    const filteredDeliveryData = newFilteredData.filter(item => {\n      return filter.deliveryTime.some(furniDeliveryTime => {\n        return parseInt(furniDeliveryTime) > parseInt(item.delivery_time);\n      })\n    });\n    newFilteredData = filteredDeliveryData;\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"header-menu\">\n        <input\n          type=\"text\"\n          placeholder=\"Search Furniture\"\n          onChange={handleInputSearch}\n        />\n        <div className=\"flex-container\">\n          <div className=\"checkbox-styles\">\n            {furnitures &&\n              furnitures.furniture_styles.map((style) => {\n                return (\n                  <label key={style} htmlFor={style}>\n                    {style}\n                    <input\n                      type=\"checkbox\"\n                      name={style}\n                      onChange={handleCheckBox}\n                    />\n                  </label>\n                );\n              })}\n          </div>\n          <div className=\"delivery-time-dropdown\">\n            <label>\n              1 week\n              <input\n                onChange={handleCheckBoxDeliveryTime}\n                type=\"checkbox\"\n                name=\"oneweek\"\n                value=\"7\"\n              />\n            </label>\n            <label>\n              2 weeks\n              <input\n                onChange={handleCheckBoxDeliveryTime}\n                type=\"checkbox\"\n                name=\"twoweeks\"\n                value=\"14\"\n              />\n            </label>\n            <label>\n              1 month\n              <input\n                onChange={handleCheckBoxDeliveryTime}\n                type=\"checkbox\"\n                name=\"onemonth\"\n                value=\"30\"\n              />\n            </label>\n            <label>\n              2 months\n              <input\n                onChange={handleCheckBoxDeliveryTime}\n                type=\"checkbox\"\n                name=\"twomonths\"\n                value=\"60\"\n              />\n            </label>\n          </div>\n        </div>\n      </div>\n      <div className=\"product-container\">\n        {furnitures &&\n          newFilteredData.map((item) => {\n            return <ProductItem key={item.name} product={item} />;\n          })}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}